<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.ahut.teamwork.dao.TeacherMapper">
	<resultMap id="BaseResultMap"
		type="cn.edu.ahut.teamwork.entity.Teacher">
		<result column="id" jdbcType="VARCHAR" property="id" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="password" jdbcType="VARCHAR"
			property="password" />
		<result column="sfzh" jdbcType="VARCHAR" property="sfzh" />
		<result column="sex" jdbcType="VARCHAR" property="sex" />
		<result column="academy" jdbcType="VARCHAR" property="academy" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, name, password, sfzh, sex, academy
	</sql>
	<select id="selectByExample"
		parameterType="cn.edu.ahut.teamwork.entity.TeacherExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from teacher
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<delete id="deleteByExample"
		parameterType="cn.edu.ahut.teamwork.entity.TeacherExample">
		delete from teacher
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert"
		parameterType="cn.edu.ahut.teamwork.entity.Teacher">
		insert into teacher (id, name, password,
		sfzh, sex, academy)
		values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{sfzh,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, #{academy,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective"
		parameterType="cn.edu.ahut.teamwork.entity.Teacher">
		insert into teacher
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="sfzh != null">
				sfzh,
			</if>
			<if test="sex != null">
				sex,
			</if>
			<if test="academy != null">
				academy,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="sfzh != null">
				#{sfzh,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				#{sex,jdbcType=VARCHAR},
			</if>
			<if test="academy != null">
				#{academy,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<select id="countByExample"
		parameterType="cn.edu.ahut.teamwork.entity.TeacherExample"
		resultType="java.lang.Long">
		select count(*) from teacher
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update teacher
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=VARCHAR},
			</if>
			<if test="record.name != null">
				name = #{record.name,jdbcType=VARCHAR},
			</if>
			<if test="record.password != null">
				password = #{record.password,jdbcType=VARCHAR},
			</if>
			<if test="record.sfzh != null">
				sfzh = #{record.sfzh,jdbcType=VARCHAR},
			</if>
			<if test="record.sex != null">
				sex = #{record.sex,jdbcType=VARCHAR},
			</if>
			<if test="record.academy != null">
				academy = #{record.academy,jdbcType=VARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update teacher
		set id = #{record.id,jdbcType=VARCHAR},
		name = #{record.name,jdbcType=VARCHAR},
		password = #{record.password,jdbcType=VARCHAR},
		sfzh = #{record.sfzh,jdbcType=VARCHAR},
		sex = #{record.sex,jdbcType=VARCHAR},
		academy = #{record.academy,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	
	<!-- 查看所有教师 -->
	<select id="findAll" resultType="Teacher">
		SELECT * 
		FROM TEACHER
		ORDER BY ID DESC
	</select>
	
	<!--  根据id查找教师 -->
	<select id="findById" parameterType="String" resultType="Teacher">
		SELECT * 
		FROM TEACHER 
		<where>
			ID = #{id}
		</where>
	</select>
	
	<!-- 根据教师姓名模糊查询 -->
	<select id="findByName" parameterType="String" resultType="Teacher">
		SELECT * 
		FROM TEACHER 
		<where>
			NAME LIKE '%${name}%'
		</where>
		ORDER BY ID DESC
	</select>
	
</mapper>